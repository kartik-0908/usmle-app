// This is your optimized Prisma schema file with performance indexes

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  firstName     String?
  lastName      String?
  age           Int?
  gender        String? // 'male', 'female', 'other'  
  medicalSchool String?
  yearOfPassing Int?
  stepExam      String? // 'step1', 'step2'
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // User's attempts and progress
  attempts              UserAttempt[]
  problemSets           UserProblemSet[]
  name                  String
  emailVerified         Boolean
  image                 String?
  sessions              Session[]
  accounts              Account[]
  UserTopicProgress     UserTopicProgress[]
  UserStepProgress      UserStepProgress[]
  ChatMessage           ChatMessage[]
  CustomPracticeSet     CustomPracticeSet[]
  UserCustomPracticeSet UserCustomPracticeSet[]
  UserQuestionState     UserQuestionState[]

  @@map("users")
}

model Step {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  stepNumber  Int      @unique
  description String?
  order       Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // Relationships
  topics           Topic[]
  UserStepProgress UserStepProgress[]
  StepSystem       StepSystem[]
  StepDiscipline   StepDiscipline[]

  // Optimized indexes
  @@index([isActive, order]) // For active steps ordering
  @@index([slug, isActive]) // For slug lookups with active filter
  @@map("steps")
}

// New model for managing systems per step
model StepSystem {
  id        String   @id @default(cuid())
  stepId    String
  system    String
  isActive  Boolean  @default(true)
  order     Int      @default(0) // For ordering systems within a step
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  step Step @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@unique([stepId, system]) // Prevent duplicate system-step combinations
  // Optimized indexes
  @@index([stepId, isActive, order]) // For getting active systems for a step
  @@index([system, isActive]) // For finding steps that have a specific system
  @@map("step_systems")
}

// New model for managing disciplines per step
model StepDiscipline {
  id         String   @id @default(cuid())
  stepId     String
  discipline String
  isActive   Boolean  @default(true)
  order      Int      @default(0) // For ordering disciplines within a step
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  step Step @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@unique([stepId, discipline]) // Prevent duplicate discipline-step combinations
  // Optimized indexes
  @@index([stepId, isActive, order]) // For getting active disciplines for a step
  @@index([discipline, isActive]) // For finding steps that have a specific discipline
  @@map("step_disciplines")
}

model Topic {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Foreign key to Step
  stepId String
  step   Step   @relation(fields: [stepId], references: [id], onDelete: Cascade)

  // Relationships
  subtopics              Subtopic[]
  questionTopics         QuestionTopic[]
  UserTopicProgress      UserTopicProgress[]
  CustomPracticeSetTopic CustomPracticeSetTopic[]

  @@unique([stepId, name])
  // Optimized indexes
  @@index([isActive, stepId, order])
  @@index([slug, isActive]) // Critical: for your slug+active lookups
  @@index([stepId, isActive, order]) // For step topics ordering
  @@index([isActive, createdAt]) // For active topics by date
  @@map("topics")
}

model Subtopic {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign key
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  // Relationships
  questionSubtopics QuestionSubtopic[]

  @@unique([topicId, name])
  // Optimized indexes
  @@index([slug, isActive]) // Critical: for your slug+active lookups
  @@index([topicId, isActive, order]) // For topic subtopics ordering
  @@index([isActive, createdAt]) // For active subtopics by date
  @@map("subtopics")
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String   @db.Text
  role      String // "user" or "assistant"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId     String
  questionId String

  // Relationships
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // Optimized indexes
  @@index([userId, questionId, createdAt]) // For loading chat history
  @@index([questionId, createdAt]) // For question-specific chats
  @@index([userId, createdAt]) // For user chat history
  @@map("chat_messages")
}

model Question {
  id           String       @id @default(cuid())
  title        String
  questionText String       @db.Text
  explanation  String?      @db.Text
  o1answer     String?
  difficulty   Difficulty   @default(MEDIUM)
  questionType QuestionType @default(MULTIPLE_CHOICE)
  isActive     Boolean      @default(false)
  system       String? // Which body system this question covers
  discipline   String? // Which medical discipline this question belongs to

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  options                    Option[]
  questionTopics             QuestionTopic[]
  questionSubtopics          QuestionSubtopic[]
  attempts                   UserAttempt[]
  problemSetQuestions        ProblemSetQuestion[]
  ChatMessage                ChatMessage[]
  UserCustomPracticeQuestion UserCustomPracticeQuestion[]
  QuestionTag                QuestionTag[]
  UserQuestionState          UserQuestionState[]
  QuestionSystem             QuestionSystem[]
  QuestionDiscipline         QuestionDiscipline[]

  // Optimized indexes
  @@index([isActive, createdAt]) // Critical: for your navigation queries
  @@index([isActive, difficulty]) // For filtering by difficulty
  @@index([isActive, questionType]) // For filtering by type
  @@index([isActive, system]) // NEW: For filtering by system
  @@index([isActive, discipline]) // NEW: For filtering by discipline
  @@index([system, discipline, isActive]) // NEW: For combined filtering
  @@index([createdAt]) // For ordering questions
  @@map("questions")
}

model Option {
  id         String   @id @default(cuid())
  text       String   @db.Text
  isCorrect  Boolean  @default(false)
  order      Int      @default(0)
  // Foreign key
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // Optimized indexes
  @@index([questionId, order]) // For ordered options lookup
  @@index([questionId, isCorrect]) // For finding correct answers quickly
  @@map("options")
}

// Junction table for Question-Topic many-to-many relationship
model QuestionTopic {
  questionId String
  topicId    String
  createdAt  DateTime @default(now())

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  topic    Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([questionId, topicId])
  // Critical indexes for junction table performance
  @@index([topicId, questionId])
  @@index([topicId]) // For topic -> questions lookups
  @@index([questionId]) // For question -> topics lookups
  @@index([topicId, createdAt]) // For ordered topic questions
  @@map("question_topics")
}

// Junction table for Question-Subtopic many-to-many relationship
model QuestionSubtopic {
  questionId String
  subtopicId String
  createdAt  DateTime @default(now())

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  subtopic Subtopic @relation(fields: [subtopicId], references: [id], onDelete: Cascade)

  @@id([questionId, subtopicId])
  // Critical indexes for junction table performance
  @@index([subtopicId]) // For subtopic -> questions lookups
  @@index([questionId]) // For question -> subtopics lookups
  @@index([subtopicId, createdAt]) // For ordered subtopic questions
  @@map("question_subtopics")
}

model ProblemSet {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  questions       ProblemSetQuestion[]
  userProblemSets UserProblemSet[]

  // Optimized indexes
  @@index([isActive, createdAt]) // For active problem sets
  @@map("problem_sets")
}

// Junction table for ProblemSet-Question many-to-many relationship
model ProblemSetQuestion {
  problemSetId String
  questionId   String
  order        Int      @default(0)
  createdAt    DateTime @default(now())

  problemSet ProblemSet @relation(fields: [problemSetId], references: [id], onDelete: Cascade)
  question   Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([problemSetId, questionId])
  // Optimized indexes
  @@index([problemSetId, order]) // For ordered problem set questions
  @@index([questionId]) // For question lookups
  @@map("problem_set_questions")
}

model UserAttempt {
  id              String   @id @default(cuid())
  selectedOptions String[] // Array of selected option IDs
  isCorrect       Boolean
  timeSpent       Int? // Time spent in seconds
  attemptedAt     DateTime @default(now())

  // Foreign keys
  userId     String
  questionId String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  // Optimized indexes
  @@index([userId, attemptedAt]) // For user attempt history
  @@index([questionId, isCorrect]) // For question analytics
  @@index([userId, questionId]) // For checking if user attempted question
  @@index([userId, isCorrect, attemptedAt]) // NEW: For user's correct/incorrect history
  @@map("user_attempts")
}

model UserProblemSet {
  id             String           @id @default(cuid())
  status         ProblemSetStatus @default(NOT_STARTED)
  score          Int? // Score out of total questions
  totalQuestions Int?
  startedAt      DateTime?
  completedAt    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  // Foreign keys
  userId       String
  problemSetId String

  problemSet ProblemSet @relation(fields: [problemSetId], references: [id], onDelete: Cascade)
  User       User       @relation(fields: [userId], references: [id])

  @@unique([userId, problemSetId])
  // Optimized indexes
  @@index([userId, status]) // For user progress queries
  @@index([problemSetId, status]) // For problem set analytics
  @@map("user_problem_sets")
}

model UserTopicProgress {
  id                 String    @id @default(cuid())
  userId             String
  topicId            String
  questionsAttempted Int       @default(0)
  questionsCorrect   Int       @default(0)
  totalTimeSpent     Int       @default(0) // in seconds
  lastPracticedAt    DateTime?
  streak             Int       @default(0) // Current streak
  bestStreak         Int       @default(0) // Best streak ever
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relationships
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  // Optimized indexes
  @@index([userId, lastPracticedAt]) // For recent practice queries
  @@index([topicId, questionsCorrect]) // For topic leaderboards
  @@map("user_topic_progress")
}

model UserStepProgress {
  id                 String    @id @default(cuid())
  userId             String
  stepId             String
  questionsAttempted Int       @default(0)
  questionsCorrect   Int       @default(0)
  totalTimeSpent     Int       @default(0) // in seconds
  lastPracticedAt    DateTime?
  streak             Int       @default(0) // Current streak
  bestStreak         Int       @default(0) // Best streak ever
  isCompleted        Boolean   @default(false)
  completedAt        DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  step Step @relation(fields: [stepId], references: [id], onDelete: Cascade)

  @@unique([userId, stepId])
  // Optimized indexes
  @@index([userId, isCompleted]) // For user progress queries
  @@index([stepId, isCompleted]) // For step completion analytics
  @@index([userId, lastPracticedAt]) // For recent practice queries
  @@map("user_step_progress")
}

model CustomPracticeSet {
  id             String   @id @default(cuid())
  name           String
  description    String?
  totalQuestions Int // User-specified number of questions
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Foreign key
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relationships
  topics           CustomPracticeSetTopic[]
  userPracticeSets UserCustomPracticeSet[]

  // Optimized indexes
  @@index([userId, isActive, createdAt]) // For user's practice sets
  @@index([isActive, createdAt]) // For active practice sets
  @@map("custom_practice_sets")
}

// Junction table for CustomPracticeSet-Topic many-to-many relationship
model CustomPracticeSetTopic {
  customPracticeSetId String
  topicId             String
  createdAt           DateTime @default(now())

  customPracticeSet CustomPracticeSet @relation(fields: [customPracticeSetId], references: [id], onDelete: Cascade)
  topic             Topic             @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@id([customPracticeSetId, topicId])
  // Optimized indexes
  @@index([topicId]) // For topic -> practice sets lookups
  @@index([customPracticeSetId]) // For practice set -> topics lookups
  @@map("custom_practice_set_topics")
}

model UserCustomPracticeSet {
  id                 String            @id @default(cuid())
  status             PracticeSetStatus @default(NOT_STARTED)
  score              Int? // Score out of total questions attempted
  questionsAttempted Int               @default(0)
  questionsCorrect   Int               @default(0)
  startedAt          DateTime?
  completedAt        DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  // Foreign keys
  userId              String
  customPracticeSetId String

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  customPracticeSet CustomPracticeSet @relation(fields: [customPracticeSetId], references: [id], onDelete: Cascade)

  // Store the generated questions for this session
  generatedQuestions UserCustomPracticeQuestion[]

  @@unique([userId, customPracticeSetId])
  // Optimized indexes
  @@index([userId, status]) // For user progress queries
  @@index([customPracticeSetId, status]) // For practice set analytics
  @@map("user_custom_practice_sets")
}

// Store the specific questions generated for each user's practice session
model UserCustomPracticeQuestion {
  id                      String   @id @default(cuid())
  userCustomPracticeSetId String
  questionId              String
  order                   Int      @default(0)
  createdAt               DateTime @default(now())

  userCustomPracticeSet UserCustomPracticeSet @relation(fields: [userCustomPracticeSetId], references: [id], onDelete: Cascade)
  question              Question              @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userCustomPracticeSetId, questionId])
  // Optimized indexes
  @@index([userCustomPracticeSetId, order]) // For ordered questions
  @@index([questionId]) // For question lookups
  @@map("user_custom_practice_questions")
}

// Add this new enum
enum PracticeSetStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PAUSED
}

// Enums (unchanged)
enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  MULTIPLE_SELECT
}

enum ProblemSetStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PAUSED
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  // Optimized indexes
  @@index([userId, expiresAt]) // For session cleanup
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  // Optimized indexes
  @@index([userId, providerId]) // For user account lookups
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  // Optimized indexes
  @@index([identifier, value]) // For verification lookups
  @@index([expiresAt]) // For cleanup of expired verifications
  @@map("verification")
}

// New model for tags
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  color     String? // Hex color for UI display
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  questionTags QuestionTag[]

  // Optimized indexes
  @@index([isActive, name]) // For active tags lookup
  @@index([slug, isActive]) // For slug lookups
  @@map("tags")
}

// Junction table for Question-Tag many-to-many relationship
model QuestionTag {
  questionId String
  tagId      String
  createdAt  DateTime @default(now())

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([questionId, tagId])
  // Critical indexes for junction table performance
  @@index([tagId]) // For tag -> questions lookups
  @@index([questionId]) // For question -> tags lookups
  @@index([tagId, createdAt]) // For ordered tag questions
  @@map("question_tags")
}

// Junction table for Question-System many-to-many relationship
model QuestionSystem {
  questionId String
  system     String
  createdAt  DateTime @default(now())

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([questionId, system])
  // Critical indexes for junction table performance
  @@index([system]) // For system -> questions lookups
  @@index([questionId]) // For question -> systems lookups
  @@index([system, createdAt]) // For ordered system questions
  @@map("question_systems")
}

// Junction table for Question-Discipline many-to-many relationship
model QuestionDiscipline {
  questionId String
  discipline String
  createdAt  DateTime @default(now())

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([questionId, discipline])
  // Critical indexes for junction table performance
  @@index([discipline]) // For discipline -> questions lookups
  @@index([questionId]) // For question -> disciplines lookups
  @@index([discipline, createdAt]) // For ordered discipline questions
  @@map("question_disciplines")
}

// New model for user-specific question states
model UserQuestionState {
  id         String   @id @default(cuid())
  userId     String
  questionId String
  isUsed     Boolean  @default(false) // Whether user has used this question
  isMarked   Boolean  @default(false) // Whether user has marked this question
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relationships
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  // Optimized indexes
  @@index([userId, isUsed]) // For filtering used/unused questions
  @@index([userId, isMarked]) // For filtering marked questions
  @@index([questionId, isUsed]) // For question usage analytics
  @@map("user_question_states")
}
